// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  name                    String?
  clerkId                 String   @unique
  subscriptionTier        String   @default("free")
  notificationPreferences Json?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  xAccounts    XAccount[]
  targetUsers  TargetUser[]
  replyQueue   ReplyQueue[]
  templates    ReplyTemplate[]
  analytics    EngagementAnalytics[]
  compliance   ComplianceLog[]
  subscription Subscription?
  usage        UsageMetric[]
  replyStyle   ReplyStyle?
  autopilotSettings AutopilotSettings?
  scheduledContent ScheduledContent[]
  userTweets UserTweet[]
  styleAnalyses UserStyleAnalysis[]
  replyDumps ReplyDump[]
  socialNodes SocialNode[]
  socialRelations SocialRelation[]
  socialInteractions SocialInteraction[]
  socialClusters SocialCluster[]
  influencePaths InfluencePath[]

  @@map("users")
}

model XAccount {
  id           String    @id @default(cuid())
  userId       String
  xUserId      String    @unique
  username     String
  accessToken  String    // encrypted
  refreshToken String?   // encrypted
  isActive     Boolean   @default(true)
  isVerified   Boolean   @default(false) // Twitter verification status
  followerCount Int      @default(0)
  lastActivity DateTime?
  createdAt    DateTime  @default(now())

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetUsers  TargetUser[]
  replyQueue   ReplyQueue[]
  compliance   ComplianceLog[]
  scheduledContent ScheduledContent[]

  @@map("x_accounts")
}

model TargetUser {
  id              String    @id @default(cuid())
  userId          String
  xAccountId      String
  targetUsername  String
  targetUserId    String?
  isActive        Boolean   @default(true)
  lastScraped     DateTime?
  engagementScore Float     @default(0)
  notes           String?
  createdAt       DateTime  @default(now())

  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  xAccount  XAccount              @relation(fields: [xAccountId], references: [id], onDelete: Cascade)
  tweets    Tweet[]
  analytics EngagementAnalytics[]

  @@unique([userId, targetUsername])
  @@map("target_users")
}

model Tweet {
  id           String    @id @default(cuid())
  tweetId      String    @unique
  targetUserId String
  content      String
  authorUsername String
  publishedAt  DateTime
  likeCount    Int       @default(0)
  replyCount   Int       @default(0)
  retweetCount Int       @default(0)
  sentimentScore Float?
  isDeleted    Boolean   @default(false)
  scrapedAt    DateTime  @default(now())

  targetUser TargetUser   @relation(fields: [targetUserId], references: [id], onDelete: Cascade)
  replies    ReplyQueue[]

  @@map("tweets")
}

model ReplyQueue {
  id            String    @id @default(cuid())
  userId        String
  xAccountId    String
  tweetId       String
  replyContent  String
  replyType     String    @default("ai_generated") // ai_generated, dump_based, template
  replyDumpId   String?   // Reference to reply dump used
  scheduledFor  DateTime
  status        String    @default("pending") // pending, sent, failed, cancelled
  retryCount    Int       @default(0)
  errorMessage  String?
  sentAt        DateTime?
  isAutoGenerated Boolean @default(false) // Auto-generated by system
  createdAt     DateTime  @default(now())

  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  xAccount  XAccount              @relation(fields: [xAccountId], references: [id], onDelete: Cascade)
  tweet     Tweet                 @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  analytics EngagementAnalytics[]

  @@map("reply_queue")
}

model EngagementAnalytics {
  id             String   @id @default(cuid())
  userId         String
  targetUserId   String?
  replyId        String?
  engagementType String   // 'like', 'reply', 'retweet', 'mention'
  engagementValue Int     @default(1)
  trackedAt      DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetUser TargetUser? @relation(fields: [targetUserId], references: [id], onDelete: Cascade)
  reply      ReplyQueue? @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@map("engagement_analytics")
}

model ComplianceLog {
  id               String   @id @default(cuid())
  userId           String
  xAccountId       String?
  actionType       String
  complianceStatus String   // 'compliant', 'warning', 'violation'
  details          Json?
  timestamp        DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  xAccount XAccount? @relation(fields: [xAccountId], references: [id], onDelete: Cascade)

  @@map("compliance_logs")
}

model ReplyTemplate {
  id              String  @id @default(cuid())
  userId          String
  name            String
  templateContent String
  category        String?
  successRate     Float   @default(0)
  usageCount      Int     @default(0)
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reply_templates")
}

model Subscription {
  id                  String    @id @default(cuid())
  userId              String    @unique
  stripeSubscriptionId String?
  planName            String
  status              String
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  cancelAtPeriodEnd   Boolean   @default(false)
  createdAt           DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UsageMetric {
  id          String   @id @default(cuid())
  userId      String
  metricType  String   // 'replies_sent', 'targets_monitored', 'api_calls'
  metricValue Int
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_metrics")
}

model ReplyStyle {
  id        String   @id @default(cuid())
  userId    String   @unique
  styles    String   // JSON string containing style configuration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reply_styles")
}

model AutopilotSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  isEnabled             Boolean  @default(false)
  maxRepliesPerDay      Int      @default(30)
  maxRepliesPerHour     Int      @default(5)
  minDelayBetweenReplies Int     @default(360) // seconds (6 minutes)
  minDelayToSameUser    Int      @default(1800) // seconds (30 minutes)
  enabledHours          String   @default("09:00-17:00") // JSON string for time ranges
  enabledDays           String   @default("[1,2,3,4,5]") // JSON array for days of week (1=Monday)
  targetSentimentFilter String   @default("all") // positive, negative, neutral, all
  onlyReplyToVerified   Boolean  @default(false)
  skipRetweets          Boolean  @default(true)
  skipReplies           Boolean  @default(true)
  minFollowerCount      Int      @default(0)
  maxTweetAge           Int      @default(1440) // minutes (24 hours)
  pauseIfBlocked        Boolean  @default(true)
  pauseIfRateLimited    Boolean  @default(true)
  notifyOnPause         Boolean  @default(true)
  customFilters         String   @default("{}") // JSON for custom filtering rules
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("autopilot_settings")
}

model ScheduledContent {
  id           String   @id @default(cuid())
  userId       String
  xAccountId   String
  type         String   // 'tweet' or 'thread'
  content      String   // JSON string containing tweet content
  previewText  String
  scheduledFor DateTime
  status       String   @default("scheduled") // scheduled, published, failed, cancelled
  tweetCount   Int      @default(1)
  images       String   @default("[]") // JSON array of image URLs
  publishedAt  DateTime?
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  xAccount XAccount @relation(fields: [xAccountId], references: [id], onDelete: Cascade)

  @@map("scheduled_content")
}

model UserTweet {
  id         String   @id @default(cuid())
  userId     String
  content    String
  originalId String   // Original tweet ID or manual identifier
  source     String   // 'manual', 'rapidapi', etc.
  metadata   String   @default("{}") // JSON metadata (likes, retweets, etc.)
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tweets")
}

model UserStyleAnalysis {
  id         String   @id @default(cuid())
  userId     String
  analysis   String   // JSON containing the style analysis
  confidence Float    @default(0.8)
  tweetCount Int      @default(0)
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_style_analyses")
}

model ReplyDump {
  id          String   @id @default(cuid())
  userId      String
  content     String   // The reply content
  tags        String   @default("[]") // JSON array of tags/keywords
  tone        String   @default("neutral") // professional, casual, witty, etc.
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  successRate Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reply_dumps")
}

model ProjectTweetCache {
  id            String   @id @default(cuid())
  projectHandle String
  tweetId       String
  content       String
  publishedAt   DateTime
  engagement    String   @default("{}") // JSON for likes, retweets, replies
  sentiment     String   @default("neutral")
  topics        String   @default("[]") // JSON array of topics
  cachedAt      DateTime @default(now())
  expiresAt     DateTime?

  @@unique([projectHandle, tweetId])
  @@map("project_tweet_cache")
}

model ErrorLog {
  id             String   @id @default(cuid())
  userId         String?
  userEmail      String?
  errorType      String   // API_ERROR, CLIENT_ERROR, AUTH_ERROR, SYSTEM_ERROR, DATABASE_ERROR
  errorMessage   String
  errorStack     String?  @db.Text
  endpoint       String?
  method         String?
  userAgent      String?
  ipAddress      String?
  requestBody    String?  @db.Text
  responseStatus Int?
  metadata       String   @default("{}") @db.Text // JSON for additional context
  timestamp      DateTime @default(now())
  resolved       Boolean  @default(false)
  severity       String   @default("medium") // low, medium, high, critical

  @@index([timestamp])
  @@index([errorType])
  @@index([severity])
  @@index([resolved])
  @@index([userId])
  @@map("error_logs")
}

model SocialNode {
  id              String   @id @default(cuid())
  userId          String
  username        String   @unique
  displayName     String?
  profileImageUrl String?
  followerCount   Int      @default(0)
  followingCount  Int      @default(0)
  tweetCount      Int      @default(0)
  isVerified      Boolean  @default(false)
  accountAge      Int?     // days since account creation
  bio             String?
  location        String?
  website         String?
  lastSeen        DateTime?
  influenceScore  Float    @default(0)
  engagementRate  Float    @default(0)
  topicAffinity   String   @default("{}") @db.Text // JSON of topics and scores
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  outgoingRelations SocialRelation[]    @relation("FromUser")
  incomingRelations SocialRelation[]    @relation("ToUser")
  interactions      SocialInteraction[]
  clusterMembers    SocialCluster[]

  @@index([username])
  @@index([influenceScore])
  @@index([followerCount])
  @@index([userId])
  @@map("social_nodes")
}

model SocialRelation {
  id               String   @id @default(cuid())
  userId           String
  fromUserId       String
  toUserId         String
  relationType     String   // follows, mentions, replies, quotes, retweets
  strength         Float    @default(1.0) // relationship strength (0-1)
  frequency        Int      @default(1) // how often they interact
  reciprocal       Boolean  @default(false) // is the relationship mutual
  lastInteraction  DateTime?
  sentimentScore   Float    @default(0) // average sentiment of interactions
  topicOverlap     Float    @default(0) // shared interest score
  influenceFlow    Float    @default(0) // influence transfer score
  metadata         String   @default("{}") @db.Text // JSON for additional data
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromUser SocialNode @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   SocialNode @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId, relationType])
  @@index([userId])
  @@index([fromUserId])
  @@index([toUserId])
  @@index([relationType])
  @@index([strength])
  @@map("social_relations")
}

model SocialInteraction {
  id             String   @id @default(cuid())
  userId         String
  nodeId         String
  interactionType String  // like, reply, retweet, quote, mention
  tweetId        String?
  content        String?
  sentimentScore Float    @default(0)
  engagementLevel String  @default("low") // low, medium, high
  timestamp      DateTime
  metadata       String   @default("{}") @db.Text
  createdAt      DateTime @default(now())

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  node SocialNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([nodeId])
  @@index([timestamp])
  @@index([interactionType])
  @@map("social_interactions")
}

model SocialCluster {
  id          String   @id @default(cuid())
  userId      String
  nodeId      String
  clusterId   String   // identifier for the cluster
  clusterName String?  // friendly name for the cluster
  centrality  Float    @default(0) // how central this node is in the cluster
  topics      String   @default("[]") @db.Text // JSON array of cluster topics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  node SocialNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@unique([nodeId, clusterId])
  @@index([userId])
  @@index([clusterId])
  @@map("social_clusters")
}

model InfluencePath {
  id             String   @id @default(cuid())
  userId         String
  sourceNodeId   String
  targetNodeId   String
  pathLength     Int      // degrees of separation
  influenceScore Float    // total influence along the path
  pathNodes      String   @db.Text // JSON array of node IDs in the path
  topics         String   @default("[]") @db.Text // relevant topics
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sourceNodeId, targetNodeId, userId])
  @@index([userId])
  @@index([influenceScore])
  @@map("influence_paths")
}